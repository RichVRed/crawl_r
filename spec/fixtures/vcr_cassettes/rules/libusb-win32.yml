---
http_interactions:
- request:
    method: get
    uri: https://sourceforge.net/projects/libusb-win32/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 26 Jan 2017 12:25:19 GMT
      Content-Type:
      - text/html; charset=utf-8
      Connection:
      - close
      Pragma:
      - no-cache
      Cache-Control:
      - no-cache
      X-Ua-Compatible:
      - IE=edge,chrome=1
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - upgrade-insecure-requests
      Set-Cookie:
      - VISITOR=5889eaafd3179d0f4b7280dc; expires="Sun, 24-Jan-2027 12:25:19 GMT";
        httponly; Max-Age=315360000; Path=/
      - sourceforge=87845bf19f4e9c277f51e2059c3c8058ee9ec26dgAJ9cQEoVQxsYW5kaW5nX3BhZ2VxAlUXL3Byb2plY3RzL2xpYnVzYi13aW4zMi9xA1UFcHJlZnNxBH1xBVUdcGVyc2lzdGVudF9xdWVyeXN0cmluZ19zd2l0Y2hxBlUAVQNrZXlxB1UYNTg4OWVhYWZkMzE3OWQwZjRiNzI4MGRjcQhVA19pZHEJVSA3MjUyYWYxMTA5OWE0M2FkYTFiNTA5ZDlhZTY2MDEwZXEKVQ5fYWNjZXNzZWRfdGltZXELR0HWInqr1EemVQ5fY3JlYXRpb25fdGltZXEMR0HWInqr1EeddS4=;
        expires=Tue, 19-Jan-2038 03:14:07 GMT; httponly; Path=/; secure
      Content-Length:
      - '91318'
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 26 Jan 2017 12:25:19 GMT
recorded_with: VCR 3.0.3
