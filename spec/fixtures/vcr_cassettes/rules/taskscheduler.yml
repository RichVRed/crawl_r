---
http_interactions:
- request:
    method: get
    uri: http://taskscheduler.codeplex.com/license
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - CDS01
      - Microsoft-IIS/8.0
      Set-Cookie:
      - ASP.NET_SessionId=0kalixotctn3qefbw1uc5yli; domain=.codeplex.com; path=/;
        HttpOnly
      - ASP.NET_SessionId=0kalixotctn3qefbw1uc5yli; domain=.codeplex.com; path=/;
        HttpOnly
      - __RequestVerificationToken218937653-c9f2-4fe0-a554-26ef87cfcaca=Bgf6Kv9M-JYqFPHLk7CVZnkgFzu8nYwxYeQlhiMqa8G5-_KmO7maUWXu3LIlgfTMZ45K1lPsN3pSkPGElkj9sf91NkF2mguMSYIfM4tSiSVs4dz6OBcXPQkdYfH_Jr_hlTUiHg2;
        domain=.codeplex.com; path=/; HttpOnly
      - __RequestVerificationToken=Bgf6Kv9M-JYqFPHLk7CVZnkgFzu8nYwxYeQlhiMqa8G5-_KmO7maUWXu3LIlgfTMZ45K1lPsN3pSkPGElkj9sf91NkF2mguMSYIfM4tSiSVs4dz6OBcXPQkdYfH_Jr_hlTUiHg2;
        domain=.codeplex.com; path=/; HttpOnly
      X-Aspnetmvc-Version:
      - '4.0'
      P3p:
      - CP="NON DSP COR ADM CUR DEV TAI OUR IND NAV PRE STA"
      - CP="NON DSP COR ADM CUR DEV TAI OUR IND NAV PRE STA"
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Date:
      - Thu, 26 Jan 2017 13:28:05 GMT
      Cteonnt-Length:
      - '19861'
      Content-Length:
      - '6641'
      Age:
      - '0'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 26 Jan 2017 13:28:05 GMT
recorded_with: VCR 3.0.3
